import { PackageJsonKind } from './package-json-kind.enum.js';

/**
 * These are the kinds of paths the entries in a packageJson's exports object
 * can point to.
 *
 * It is only used for the development/source packageJson. The distributed
 * packageJson will only have paths that refer to itself.
 */
export enum PackageJsonExportTarget {
	/**
	 * This targets the source files.
	 *
	 * For example the `development` packageJson targets the local entry points
	 * for types
	 */
	SOURCE = 'source',
	/**
	 * This targets the directory where compiled files end up in. Wherever
	 * `outDir` points to.
	 *
	 * For example both the `development` and `distribution` packageJson files
	 * target this for the actual imports.
	 */
	DIST = 'dist',
	/**
	 * The shim folder is used for local bins
	 *
	 * For example the `development` packageJson files bin entries target the
	 * shim directory. So pnpm can link them event before the package is built.
	 */
	SHIM = 'shim',
}

export const allExportPathCombinations = [
	`${PackageJsonKind.DEVELOPMENT}-to-${PackageJsonExportTarget.SOURCE}`,
	`${PackageJsonKind.DEVELOPMENT}-to-${PackageJsonExportTarget.DIST}`,
	`${PackageJsonKind.DISTRIBUTION}-to-${PackageJsonExportTarget.DIST}`,
] as const;
export type AllExportPathCombinations = (typeof allExportPathCombinations)[number];

export const allBinPathCombinations = [
	`${PackageJsonKind.DEVELOPMENT}-to-${PackageJsonExportTarget.SHIM}`,
	`${PackageJsonKind.DISTRIBUTION}-to-${PackageJsonExportTarget.DIST}`,
];
/**
 * BinPaths never point into the nothing. Dist points to dist but source only
 * points to a shim generated by AutoBin not to confuse package managers when
 * an unbuilt package is installed locally. The shim will be there for them.
 * The shim will not be usable until the package is built though.
 *
 * TODO: generate shims that can self trigger builds when called and not built
 */
export type AllBinPathCombinations = (typeof allBinPathCombinations)[number];
